{
  "version": 3,
  "sources": ["../../d3-array/src/ascending.js", "../../d3-array/src/descending.js", "../../d3-array/src/bisector.js", "../../d3-array/src/number.js", "../../d3-array/src/bisect.js", "../../d3-array/src/blur.js", "../../d3-array/src/variance.js", "../../d3-array/src/deviation.js", "../../d3-array/src/sort.js", "../../d3-array/src/array.js", "../../d3-array/src/ticks.js", "../../d3-array/src/max.js", "../../d3-array/src/min.js", "../../d3-array/src/quickselect.js", "../../d3-array/src/quantile.js", "../../d3-array/src/median.js", "../../d3-array/src/shuffle.js", "../../vega-statistics/src/numbers.js", "../../vega-statistics/src/quantiles.js", "../../vega-statistics/src/quartiles.js", "../../vega-statistics/src/bandwidth.js", "../../vega-statistics/src/bin.js", "../../vega-statistics/src/random.js", "../../vega-statistics/src/bootstrapCI.js", "../../vega-statistics/src/dotbin.js", "../../vega-statistics/src/lcg.js", "../../vega-statistics/src/integer.js", "../../vega-statistics/src/constants.js", "../../vega-statistics/src/normal.js", "../../vega-statistics/src/kde.js", "../../vega-statistics/src/lognormal.js", "../../vega-statistics/src/mixture.js", "../../vega-statistics/src/uniform.js", "../../vega-statistics/src/regression/constant.js", "../../vega-statistics/src/regression/ols.js", "../../vega-statistics/src/regression/points.js", "../../vega-statistics/src/regression/r-squared.js", "../../vega-statistics/src/regression/linear.js", "../../vega-statistics/src/regression/log.js", "../../vega-statistics/src/regression/exp.js", "../../vega-statistics/src/regression/pow.js", "../../vega-statistics/src/regression/quad.js", "../../vega-statistics/src/regression/poly.js", "../../vega-statistics/src/regression/loess.js", "../../vega-statistics/src/sampleCurve.js"],
  "sourcesContent": ["export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n", "import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n", "export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n", "import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n", "export function blur(values, r) {\n  if (!((r = +r) >= 0)) throw new RangeError(\"invalid r\");\n  let length = values.length;\n  if (!((length = Math.floor(length)) >= 0)) throw new RangeError(\"invalid length\");\n  if (!length || !r) return values;\n  const blur = blurf(r);\n  const temp = values.slice();\n  blur(values, temp, 0, length, 1);\n  blur(temp, values, 0, length, 1);\n  blur(values, temp, 0, length, 1);\n  return values;\n}\n\nexport const blur2 = Blur2(blurf);\n\nexport const blurImage = Blur2(blurfImage);\n\nfunction Blur2(blur) {\n  return function(data, rx, ry = rx) {\n    if (!((rx = +rx) >= 0)) throw new RangeError(\"invalid rx\");\n    if (!((ry = +ry) >= 0)) throw new RangeError(\"invalid ry\");\n    let {data: values, width, height} = data;\n    if (!((width = Math.floor(width)) >= 0)) throw new RangeError(\"invalid width\");\n    if (!((height = Math.floor(height !== undefined ? height : values.length / width)) >= 0)) throw new RangeError(\"invalid height\");\n    if (!width || !height || (!rx && !ry)) return data;\n    const blurx = rx && blur(rx);\n    const blury = ry && blur(ry);\n    const temp = values.slice();\n    if (blurx && blury) {\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    } else if (blurx) {\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n    } else if (blury) {\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    }\n    return data;\n  };\n}\n\nfunction blurh(blur, T, S, w, h) {\n  for (let y = 0, n = w * h; y < n;) {\n    blur(T, S, y, y += w, 1);\n  }\n}\n\nfunction blurv(blur, T, S, w, h) {\n  for (let x = 0, n = w * h; x < w; ++x) {\n    blur(T, S, x, x + n, w);\n  }\n}\n\nfunction blurfImage(radius) {\n  const blur = blurf(radius);\n  return (T, S, start, stop, step) => {\n    start <<= 2, stop <<= 2, step <<= 2;\n    blur(T, S, start + 0, stop + 0, step);\n    blur(T, S, start + 1, stop + 1, step);\n    blur(T, S, start + 2, stop + 2, step);\n    blur(T, S, start + 3, stop + 3, step);\n  };\n}\n\n// Given a target array T, a source array S, sets each value T[i] to the average\n// of {S[i - r], …, S[i], …, S[i + r]}, where r = ⌊radius⌋, start <= i < stop,\n// for each i, i + step, i + 2 * step, etc., and where S[j] is clamped between\n// S[start] (inclusive) and S[stop] (exclusive). If the given radius is not an\n// integer, S[i - r - 1] and S[i + r + 1] are added to the sum, each weighted\n// according to r - ⌊radius⌋.\nfunction blurf(radius) {\n  const radius0 = Math.floor(radius);\n  if (radius0 === radius) return bluri(radius);\n  const t = radius - radius0;\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius0 * S[start];\n    const s0 = step * radius0;\n    const s1 = s0 + step;\n    for (let i = start, j = start + s0; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s0)];\n      T[i] = (sum + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;\n      sum -= S[Math.max(start, i - s0)];\n    }\n  };\n}\n\n// Like blurf, but optimized for integer radius.\nfunction bluri(radius) {\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius * S[start];\n    const s = step * radius;\n    for (let i = start, j = start + s; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s)];\n      T[i] = sum / w;\n      sum -= S[Math.max(start, i - s)];\n    }\n  };\n}\n", "export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n", "import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n", "import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\n\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n  if ((f && f.length !== 2) || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n    return permute(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\n\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\n\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n", "const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n", "export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n", "export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n", "import {ascendingDefined, compareDefined} from \"./sort.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = Infinity, compare) {\n  k = Math.floor(k);\n  left = Math.floor(Math.max(0, left));\n  right = Math.floor(Math.min(array.length - 1, right));\n\n  if (!(left <= k && k <= right)) return array;\n\n  compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n", "import max from \"./max.js\";\nimport maxIndex from \"./maxIndex.js\";\nimport min from \"./min.js\";\nimport minIndex from \"./minIndex.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\nimport {ascendingDefined} from \"./sort.js\";\nimport greatest from \"./greatest.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileIndex(values, p, valueof = number) {\n  if (isNaN(p = +p)) return;\n  numbers = Float64Array.from(values, (_, i) => number(valueof(values[i], i, values)));\n  if (p <= 0) return minIndex(numbers);\n  if (p >= 1) return maxIndex(numbers);\n  var numbers,\n      index = Uint32Array.from(values, (_, i) => i),\n      j = numbers.length - 1,\n      i = Math.floor(j * p);\n  quickselect(index, i, 0, j, (i, j) => ascendingDefined(numbers[i], numbers[j]));\n  i = greatest(index.subarray(0, i + 1), (i) => numbers[i]);\n  return i >= 0 ? i : -1;\n}\n", "import quantile, {quantileIndex} from \"./quantile.js\";\n\nexport default function median(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n\nexport function medianIndex(values, valueof) {\n  return quantileIndex(values, 0.5, valueof);\n}\n", "export default shuffler(Math.random);\n\nexport function shuffler(random) {\n  return function shuffle(array, i0 = 0, i1 = array.length) {\n    let m = i1 - (i0 = +i0);\n    while (m) {\n      const i = random() * m-- | 0, t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n    return array;\n  };\n}\n", "export default function*(values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n", "import numbers from './numbers.js';\nimport {ascending, quantileSorted} from 'd3-array';\n\nexport default function(array, p, f) {\n  const values = Float64Array.from(numbers(array, f));\n\n  // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n  values.sort(ascending);\n\n  return p.map(_ => quantileSorted(values, _));\n}\n", "import quantiles from './quantiles.js';\n\nexport default function(array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n", "import quartiles from './quartiles.js';\nimport {deviation} from 'd3-array';\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nexport default function(array, f) {\n  const n = array.length,\n        d = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34,\n        v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n", "export default function(_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2];\n\n  let min  = _.extent[0],\n      max  = _.extent[1],\n      step, level, minstep, v, i, n;\n\n  const span = _.span || (max - min) || Math.abs(min) || 1;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i-1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n\n    // increase step size if too many bins\n    while (Math.ceil(span/step) > maxb) { step *= base; }\n\n    // decrease step size if allowed\n    for (i=0, n=div.length; i<n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n        eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop:  max === min ? min + step : max,\n    step:  step\n  };\n}\n", "export var random = Math.random;\n\nexport function setRandom(r) {\n  random = r;\n}\n", "import numbers from './numbers.js';\nimport {random} from './random.js';\nimport {ascending, quantile} from 'd3-array';\n\nexport default function(array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n\n  const values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples;\n  let a, i, j, mu;\n\n  for (j=0, mu=Array(m); j<m; ++j) {\n    for (a=0, i=0; i<n; ++i) {\n      a += values[~~(random() * n)];\n    }\n    mu[j] = a / n;\n  }\n\n  mu.sort(ascending);\n\n  return [\n    quantile(mu, alpha/2),\n    quantile(mu, 1-(alpha/2))\n  ];\n}\n", "// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nexport default function(array, step, smooth, f) {\n  f = f || (_ => _);\n\n  const n = array.length,\n        v = new Float64Array(n);\n\n  let i = 0, j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n\n  for (; j<n; ++j) {\n    x = f(array[j]);\n    if (x >= w) {\n      b = (a + b) / 2;\n      for (; i<j; ++i) v[i] = b;\n      w = x + step;\n      a = x;\n    }\n    b = x;\n  }\n\n  b = (a + b) / 2;\n  for (; i<j; ++i) v[i] = b;\n\n  return smooth ? smoothing(v, step + step / 4) : v;\n}\n\n// perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n      b = 1,\n      c, d;\n\n  // get left stack\n  while (v[a] === v[b]) ++b;\n\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n    while (v[b] === v[c]) ++c;\n\n    // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n    if (v[b] - v[b-1] < thresh) {\n      d = b + ((a + c - b - b) >> 1);\n      while (d < b) v[d++] = v[b];\n      while (d > b) v[d--] = v[a];\n    }\n\n    // update left stack indices\n    a = b;\n    b = c;\n  }\n\n  return v;\n}\n", "export default function(seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function() {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n", "import {random} from './random.js';\n\nexport default function(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  let a, b, d;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample() {\n      return a + Math.floor(d * random());\n    },\n    pdf(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    },\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n    icdf(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    }\n  };\n\n  return dist.min(min).max(max);\n}\n", "export const SQRT2PI = Math.sqrt(2 * Math.PI);\nexport const SQRT2 = Math.SQRT2;", "import {SQRT2, SQRT2PI} from './constants.js';\nimport {random} from './random.js';\n\nlet nextSample = NaN;\n\nexport function sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  let x = 0, y = 0, rds, c;\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    x *= c;\n    nextSample = y * c;\n  }\n  return mean + x * stdev;\n}\n\nexport function densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n}\n\n// Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\nexport function cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  const z = (value - mean) / stdev,\n        Z = Math.abs(z);\n  let cd;\n\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n  return z > 0 ? 1 - cd : cd;\n}\n\n// Approximation of Probit function using inverse error function.\nexport function quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n}\n\n// Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = - Math.log((1 - x) * (1 + x)), p;\n\n  if (w < 6.25) {\n      w -= 3.125;\n      p =  -3.6444120640178196996e-21;\n      p =   -1.685059138182016589e-19 + p * w;\n      p =   1.2858480715256400167e-18 + p * w;\n      p =    1.115787767802518096e-17 + p * w;\n      p =   -1.333171662854620906e-16 + p * w;\n      p =   2.0972767875968561637e-17 + p * w;\n      p =   6.6376381343583238325e-15 + p * w;\n      p =  -4.0545662729752068639e-14 + p * w;\n      p =  -8.1519341976054721522e-14 + p * w;\n      p =   2.6335093153082322977e-12 + p * w;\n      p =  -1.2975133253453532498e-11 + p * w;\n      p =  -5.4154120542946279317e-11 + p * w;\n      p =    1.051212273321532285e-09 + p * w;\n      p =  -4.1126339803469836976e-09 + p * w;\n      p =  -2.9070369957882005086e-08 + p * w;\n      p =   4.2347877827932403518e-07 + p * w;\n      p =  -1.3654692000834678645e-06 + p * w;\n      p =  -1.3882523362786468719e-05 + p * w;\n      p =    0.0001867342080340571352 + p * w;\n      p =  -0.00074070253416626697512 + p * w;\n      p =   -0.0060336708714301490533 + p * w;\n      p =      0.24015818242558961693 + p * w;\n      p =       1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p =   2.2137376921775787049e-09;\n      p =   9.0756561938885390979e-08 + p * w;\n      p =  -2.7517406297064545428e-07 + p * w;\n      p =   1.8239629214389227755e-08 + p * w;\n      p =   1.5027403968909827627e-06 + p * w;\n      p =   -4.013867526981545969e-06 + p * w;\n      p =   2.9234449089955446044e-06 + p * w;\n      p =   1.2475304481671778723e-05 + p * w;\n      p =  -4.7318229009055733981e-05 + p * w;\n      p =   6.8284851459573175448e-05 + p * w;\n      p =   2.4031110387097893999e-05 + p * w;\n      p =   -0.0003550375203628474796 + p * w;\n      p =   0.00095328937973738049703 + p * w;\n      p =   -0.0016882755560235047313 + p * w;\n      p =    0.0024914420961078508066 + p * w;\n      p =   -0.0037512085075692412107 + p * w;\n      p =     0.005370914553590063617 + p * w;\n      p =       1.0052589676941592334 + p * w;\n      p =       3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p =  -2.7109920616438573243e-11;\n      p =  -2.5556418169965252055e-10 + p * w;\n      p =   1.5076572693500548083e-09 + p * w;\n      p =  -3.7894654401267369937e-09 + p * w;\n      p =   7.6157012080783393804e-09 + p * w;\n      p =  -1.4960026627149240478e-08 + p * w;\n      p =   2.9147953450901080826e-08 + p * w;\n      p =  -6.7711997758452339498e-08 + p * w;\n      p =   2.2900482228026654717e-07 + p * w;\n      p =  -9.9298272942317002539e-07 + p * w;\n      p =   4.5260625972231537039e-06 + p * w;\n      p =  -1.9681778105531670567e-05 + p * w;\n      p =   7.5995277030017761139e-05 + p * w;\n      p =  -0.00021503011930044477347 + p * w;\n      p =  -0.00013871931833623122026 + p * w;\n      p =       1.0103004648645343977 + p * w;\n      p =       4.8499064014085844221 + p * w;\n  } else {\n      p = Infinity;\n  }\n\n  return p * x;\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n", "import estimateBandwidth from './bandwidth.js';\nimport gaussian from './normal.js';\nimport {random} from './random.js';\n\nexport default function(support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n\n    pdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    },\n\n    cdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    },\n\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n  };\n\n  return dist.data(support);\n}\n", "import {cumulativeNormal, quantileNormal, sampleNormal} from './normal.js';\nimport {SQRT2PI} from './constants.js';\n\nexport function sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\n\nexport function densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\n\nexport function cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\n\nexport function quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n", "import {random} from './random.js';\n\nexport default function(dists, weights) {\n  let m = 0, w;\n\n  function normalize(x) {\n    const w = [];\n    let sum = 0, i;\n    for (i = 0; i < m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n    for (i = 0; i < m; ++i) { w[i] /= sum; }\n    return w;\n  }\n\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    },\n\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    },\n\n    sample() {\n      const r = random();\n      let d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    },\n\n    pdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    },\n\n    cdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    },\n\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n  };\n\n  return dist.distributions(dists).weights(weights);\n}\n", "import {random} from './random.js';\n\nexport function sampleUniform(min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return min + (max - min) * random();\n}\n\nexport function densityUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (value >= min && value <= max) ? 1 / (max - min) : 0;\n}\n\nexport function cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\n\nexport function quantileUniform(p, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n}\n\nexport default function(min, max) {\n  let a, b;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return dist.min(min).max(max);\n}\n", "export default function(data, x, y) {\n  let mean = 0, n = 0;\n\n  for (const d of data) {\n    const val = y(d);\n    if (x(d) == null || val == null || isNaN(val)) continue;\n    mean += (val - mean) / ++n;\n  }\n\n  return {\n    coef: [mean],\n    predict: () => mean,\n    rSquared: 0\n  };\n}\n", "// Ordinary Least Squares\nexport default function(uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n        intercept = uY - slope * uX;\n\n  return [intercept, slope];\n}\n", "export function points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d), v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n\n  const n = data.length,\n        X = new Float64Array(n),\n        Y = new Float64Array(n);\n\n  // extract values, calculate means\n  let i = 0, ux = 0, uy = 0, xv, yv, d;\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  }\n\n  // mean center the data\n  for (i=0; i<n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n\n  return [X, Y, ux, uy];\n}\n\nexport function visitPoints(data, x, y, callback) {\n  let i = -1, u, v;\n\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n", "import {visitPoints} from './points.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y, uY, predict) {\n  let SSE = 0, SST = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n          sst = dy - uY;\n\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n\n  return 1 - SSE / SST;\n}\n", "import ols from './ols.js';\nimport {visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * x;\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n", "import ols from './ols.js';\nimport {visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * Math.log(x);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n", "import ols from './ols.js';\nimport {points, visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\nexport default function(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n        predict = x => Math.exp(c0 + c1 * (x - ux));\n\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n", "import ols from './ols.js';\nimport {visitPoints} from './points.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n          ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] * Math.pow(x, coef[1]);\n\n  coef[0] = Math.exp(coef[0]);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}", "import {points} from './points.js';\nimport rSquared from './r-squared.js';\n\nexport default function(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length;\n\n  let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n      i, dx, dy, x2;\n\n  for (i=0; i<n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n\n  const X2X2 = X4 - (X2 * X2),\n        d = (X2 * X2X2 - X3 * X3),\n        a = (X2Y * X2 - XY * X3) / d,\n        b = (XY * X2X2 - X2Y * X3) / d,\n        c = -a * X2,\n        predict = x => {\n          x = x - ux;\n          return a * x * x + b * x + c + uy;\n        };\n\n  // transform coefficients back from mean-centered space\n  return {\n    coef: [\n      c - b * ux + a * ux * ux + uy,\n      b - 2 * a * ux,\n      a\n    ],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n", "import constant from './constant.js';\nimport linear from './linear.js';\nimport {points} from './points.js';\nimport quad from './quad.js';\nimport rSquared from './r-squared.js';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nexport default function(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 0) return constant(data, x, y);\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n  let i, j, l, v, c;\n\n  for (i=0; i<k; ++i) {\n    for (l=0, v=0; l<n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n\n    c = new Float64Array(k);\n    for (j=0; j<k; ++j) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n          x -= ux;\n          let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n          for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n          return y;\n        };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i=0; i<k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i=k-1; i>=0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j=1; j<=i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}", "import ols from './ols.js';\nimport {points} from './points.js';\nimport {median} from 'd3-array';\n\nconst maxiters = 2,\n      epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nexport default function(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n        yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters; ) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n      let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i){\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n      right = interval[1] + 1;\n\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && (xv[right] - val) <= (val - xv[left])) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length, out = [];\n  let i = 0, cnt = 0, prev = [], v;\n\n  for (; i<n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / (++cnt);\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n\n  return out;\n}\n", "// subdivide up to accuracy of 0.5 degrees\nconst MIN_RADIANS = 0.5 * Math.PI / 180;\n\n// Adaptively sample an interpolated function over a domain extent\nexport default function(f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n\n  const point = x => [x, f(x)],\n        minX = extent[0],\n        maxX = extent[1],\n        span = maxX - minX,\n        stop = span / maxSteps,\n        prev = [point(minX)],\n        next = [];\n\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + (i / minSteps) * span));\n    }\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + (i / minSteps) * span));\n    }\n  }\n\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n    p1 = next[next.length - 1];\n  }\n\n  return prev;\n}\n\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n\n  const n = points.length;\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n\n  return 1 / (ymax - ymin);\n}\n\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n        a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\n"],
  "mappings": "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",
  "names": ["index", "blur", "sum", "count", "mean", "sum", "index", "max", "index", "min", "index", "array", "random", "array", "numbers", "values", "valueof", "value", "index", "array", "p", "f", "Float64Array", "from", "sort", "ascending", "map", "_", "quantileSorted", "quantiles", "n", "length", "d", "deviation", "q", "quartiles", "h", "v", "Math", "min", "abs", "pow", "bin", "maxb", "maxbins", "base", "logb", "log", "div", "divide", "extent", "max", "step", "level", "minstep", "i", "span", "steps", "ceil", "round", "precision", "eps", "nice", "undefined", "floor", "start", "stop", "random", "setRandom", "r", "samples", "alpha", "m", "a", "j", "mu", "Array", "quantile", "smooth", "b", "w", "x", "smoothing", "thresh", "c", "seed", "dist", "arguments", "sample", "pdf", "cdf", "icdf", "NaN", "SQRT2PI", "sqrt", "PI", "SQRT2", "nextSample", "sampleNormal", "mean", "stdev", "y", "rds", "densityNormal", "z", "exp", "cumulativeNormal", "Z", "cd", "sum", "quantileNormal", "erfinv", "Number", "isFinite", "Infinity", "sigma", "support", "bandwidth", "kernel", "gaussian", "data", "estimateBandwidth", "Error", "sampleLogNormal", "densityLogNormal", "cumulativeLogNormal", "quantileLogNormal", "dists", "weights", "normalize", "distributions", "sampleUniform", "densityUniform", "cumulativeUniform", "quantileUniform", "constant", "val", "isNaN", "coef", "predict", "rSquared", "uX", "uY", "uXY", "uX2", "delta", "slope", "intercept", "points", "filter", "u", "X", "Y", "ux", "uy", "xv", "yv", "visitPoints", "callback", "SSE", "SST", "dx", "dy", "sse", "sst", "XY", "X2", "ols", "YL", "XYL", "X2Y", "ly", "xy", "c0", "c1", "YS", "lx", "X3", "X4", "x2", "X2X2", "order", "linear", "quad", "lhs", "rhs", "k", "l", "push", "gaussianElimination", "uncenter", "matrix", "t", "maxiters", "epsilon", "bw", "yhat", "residuals", "robustWeights", "fill", "iter", "interval", "i0", "i1", "edge", "W", "denom", "xk", "yk", "tricube", "xkw", "updateInterval", "medianResidual", "median", "arg", "output", "left", "right", "out", "cnt", "prev", "MIN_RADIANS", "minSteps", "maxSteps", "point", "minX", "maxX", "next", "p0", "p1", "sx", "sy", "scaleY", "pm", "angleDelta", "pop", "init", "ymin", "ymax", "a0", "atan2", "a1"]
}
